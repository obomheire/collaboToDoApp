//INITIAL SETUP index.js

// const { ApolloServer, gql } = require("apollo-server");
// const {
//   ApolloServerPluginLandingPageLocalDefault,
// } = require("apollo-server-core");
// const { MongoClient, ServerApiVersion } = require("mongodb");
// const dotenv = require("dotenv");
// dotenv.config();

// const { DB_URI, DB_NAME } = process.env;

// const books = [
//   {
//     title: "The Awakening",
//     author: "Kate Chopin",
//     published: "1962",
//   },
//   {
//     title: "City of Glass",
//     author: "Paul Auster",
//     published: "1955",
//   },
// ];

// // A schema is a collection of type definitions (hence "typeDefs")
// // that together define the "shape" of queries that are executed against
// // your data.
// const typeDefs = gql`
//   # The "Query" type is special: it lists all of the available queries that
//   # clients can execute, along with the return type for each. In this
//   # case, the "books" query returns an array of zero or more Books (defined above).
//   type Query {
//     books: [Book]
//   }

//   # This "Book" type defines the queryable fields for every book in our data source.
//   type Book {
//     title: String
//     author: String
//     published: Int
//   }
// `;

// // Resolvers define the technique for fetching the types defined in the
// // schema. This resolver retrieves books from the "books" array above.
// const resolvers = {
//   Query: {
//     books: (root, data, context) => {
//       console.log(context);
//       return books;
//     },
//   },
// };

// // The ApolloServer constructor requires two parameters: your schema
// // definition and your set of resolvers.

// const startServer = async () => {
//   const client = new MongoClient(DB_URI, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     serverApi: ServerApiVersion.v1,
//   });
//   await client.connect();
//   const dbCollection = client.db(DB_NAME);

//   const context = {
//     dbCollection,
//   };

//   const server = new ApolloServer({
//     typeDefs,
//     resolvers,
//     csrfPrevention: true,
//     cache: "bounded",
//     context,

//     plugins: [ApolloServerPluginLandingPageLocalDefault({ embed: true })],
//   });

//   // The `listen` method launches a web server.
//   server.listen().then(({ url }) => {
//     console.log(`ğŸš€  Server ready at ${url}`);
//   });
// };

// startServer();
